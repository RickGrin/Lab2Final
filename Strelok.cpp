#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <time.h>
#include <fstream>

int main() 
{
	using namespace std;
	const int LBOX = 9; ///длина стороны доски + 1
	const int QCELL = 65; ///кол-во клеток на шахматной доске + 1
	const int LD = 8; ///длина стороны доски
	const int CH = 64; ///кол-во клеток на шахматной доске
	int f[LBOX][LBOX]; ///2х-мерный массив, шахматная доска
	int a[QCELL]; ///одномерный массив
	int i1 = 1, i2 = 1, i3 = 1, i4 = 1, i5 = 1; ///счетчики для каждого ферзя
	int i, j, k, l, m; ///счетчики
	int qzero = 0, qs = 0; ///кол-во нулей в матрице f и кол-во найденных решений
	double t1, t2; /// начальное и конечное время
	t1 = clock();
	for (i1 = 1; i1 <= CH - 4; i1++)
	{
		for (i2 = i1 + 1; i2 <= CH - 3; i2++)
		{
			for (i3 = i2 + 1; i3 <= CH - 2; i3++)
			{
				for (i4 = i3 + 1; i4 <= CH - 1; i4++)
				{
					for (i5 = i4 + 1; i5 <= CH; i5++)
					{
						for (l = 1; l <= CH; l++)
						{
							a[l] = 0; ///обнуляем массив (0 - не размеченная клетка)
						}
						///ферзи ставятся один за другим
						a[i1] = 2; ///клетка с 1-ым ферзем
						a[i2] = 2; ///клетка со 2-ым ферзем
						a[i3] = 2; ///клетка с 3-им ферзем
						a[i4] = 2; ///клетка с 4-ым ферзем
						a[i5] = 2; ///клетка с 5-ым ферзем
						k = 1;
						///сохраняем значение из a[] в f[][] ("переносим" порядок ферзей на шахматную доску)
						for (i = 1; i <= LD; i++)
							for (j = 1; j <= LD; j++)
							{
								f[i][j] = a[k];
								k++;
							}
						for (i = 1; i <= LD; i++)
						{
							for (j = 1; j <= LD; j++)
							{
								if (f[i][j] == 2) ///если в клетке стоит ферзь
								{
									for (m = 1; m <= LD; m++)
										if (f[i][m] != 2)
											f[i][m] = 1; ///заполняем горизонталь единицами (это строка находится под ударом ферзя)
									for (m = 1; m <= LD; m++)
										if (f[m][j] != 2)
											f[m][j] = 1; ///заполняем вертикаль единицами (этот столбец находится под ударом ферзя)
									for (m = 1; m <= LD; m++)
										if (f[i + m][j + m] != 2)
											if ((i + m <= LD) && (j + m <= LD))
												f[i + m][j + m] = 1; ///заполняем диагональ вниз-вправо единицами
									for (m = 1; m <= LD; m++)
										if (f[i - m][j - m] != 2)
											if ((i - m >= 1) && (j - m >= 1))
												f[i - m][j - m] = 1; ///заполняем диагональ вверх-влево единицами
									for (m = 1; m <= LD; m++)
										if (f[i - m][j + m] != 2)
											if ((i - m >= 1) && (j + m <= LD))
												f[i - m][j + m] = 1; ///заполняем диагональ вверх-вправо единицами
									for (m = 1; m <= LD; m++)
										if (f[i + m][j - m] != 2)
											if ((i + m <= LD) && (j - m >= 1))
												f[i + m][j - m] = 1; ///заполняем диагональ вниз-влево единицами
								}
							}
						}
						qzero = 0;
						///теперь ищем нули (т.е. клетки, непопавшие под удар ни одного из ферзей)
						for (i = 1; i <= LD; i++)
							for (j = 1; j <= LD; j++)
							{
								if (f[i][j] == 0)
									qzero++;
							}
						if (qzero == 0)
						{
							qs++;
							printf("%d\n", qs);
						}
					}
				}
			}
		}
	}
	t2 = clock();
	printf("\nKol-vo reshenii = %d", qs);
	double t0;
	t0 = (t2 - t1) / CLOCKS_PER_SEC;;
	printf("\n Time: %f", t0);

	ofstream fout;
	fout.open("file.txt");
	fout << "Kol-vo reshenii = " << qs;
	fout.close();
	return 0;

	return 1;
}